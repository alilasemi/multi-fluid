#!/usr/bin/env python
import argparse
import os
from pathlib import Path
import rich.traceback
import subprocess
rich.traceback.install()

profile=True

# Command line arguments
parser = argparse.ArgumentParser(description=
        'A Python CFD solver based on the FIVER algorithm.')
parser.add_argument('mode', default='all', nargs='?',
        help="Mode of operation. Options are 'compile', 'solve', 'post', and "
        "'all'. (Default: 'all')")
parser.add_argument('-p', '--profile', dest='profile', action='store_true',
        help= 'Profile the solver using cProfile.')
args = parser.parse_args()

# Compile the code
if args.mode == 'compile' or args.mode == 'all':
    # Create build directory
    Path('build').mkdir(exist_ok=True)
    # Compile with CMake
    os.chdir('build')
    subprocess.run(['cmake', '..'], check=True)
    subprocess.run(['make', '-j12'], check=True)
    os.chdir('..')

# Run solver
if args.mode == 'solve' or args.mode == 'all':
    import solve
    print('Checking for breakpoints...', end='', flush=True)
    show_progress_bar = True
    files = ['solve.py', 'residual.py', 'mesh.py', 'problem.py']
    # Check to see if the code contains any breakpoints
    for fname in files:
        with open(fname) as f:
            if 'breakpoint()' in f.read():
                # If so, turn off the progress bar - it conflicts with Pdb
                show_progress_bar = False
                break
    print('done')

    if args.profile:
        # Begin profiler
        import cProfile
        import pstats
        profiler = cProfile.Profile()
        profiler.enable()

    solve.main(show_progress_bar)

    if args.profile:
        # End profiler and write to file
        profiler.disable()
        profiler.dump_stats('prof.out')

# Run post processing
if args.mode == 'post' or args.mode == 'all':
    import post
    post.post_process()
